from pathlib import Path


configfile: "config/params.yaml"


# Determine the PDB IDs to process
with open("resources/list.txt") as f:
    PDB_IDs = f.read().lower().splitlines()

print(f"PDB IDs: {PDB_IDs}")


rule all:
    input:
        expand("results/{pdb_id}/structural_homologs.txt", pdb_id=PDB_IDs),
        expand("results/{pdb_id}/protein_sequences/combined.fasta", pdb_id=PDB_IDs),
        expand("results/{pdb_id}/protein_sequences/.done", pdb_id=PDB_IDs),
        expand("results/{pdb_id}/protein_structures/.done", pdb_id=PDB_IDs),
        expand("results/{pdb_id}/tblastn_results.txt", pdb_id=PDB_IDs),
        expand("results/{pdb_id}/structural_alignment/alignment.log", pdb_id=PDB_IDs),
        expand("results/{pdb_id}/downstream_analysis/.done", pdb_id=PDB_IDs),
        expand("results/{pdb_id}/nucleotide_alignment/alignment.log", pdb_id=PDB_IDs),
        expand("results/{pdb_id}/nucleotide_alignment/alignment.txt", pdb_id=PDB_IDs),


rule find_structural_homologs_SCOPe:
    input:
        "resources/dir.cla.scope.2.08-stable.tsv",
    output:
        "results/{pdb_id}/structural_homologs.txt",
    shell:
        """
        category=$(cat {input} | grep {wildcards.pdb_id} \
            | awk '{{print $4}}' | awk '!seen[$0]++')
        rm -f {output}.temp
        for c in $category; do
            homologs=$(cat {input} | grep $c \
                | awk '{{print $2}}' | awk '!seen[$0]++')
            echo $homologs | awk '{{gsub(" ", "\\n")}} 1' >> {output}.temp
        done
        awk '!seen[$0]++' {output}.temp > {output}
        rm {output}.temp
        """


rule get_protein_sequences_and_structures:
    input:
        rules.find_structural_homologs_SCOPe.output,
    output:
        "results/{pdb_id}/protein_sequences/.done",
        "results/{pdb_id}/protein_structures/.done",
        sequences=directory("results/{pdb_id}/protein_sequences"),
        structures=directory("results/{pdb_id}/protein_structures"),
        combined_sequences="results/{pdb_id}/protein_sequences/combined.fasta",
    shell:
        """
        for e in $(cat {input}); do
            wget https://www.rcsb.org/fasta/entry/$e -q \
            -O {output.sequences}/$e.fasta
            wget https://files.rcsb.org/download/$e.pdb -q \
            -O {output.structures}/$e.pdb
        done
        cat {output.sequences}/*.fasta > {output.combined_sequences}
        touch {output.sequences}/.done
        touch {output.structures}/.done
        """


rule tblastn_protein_sequences:
    input:
        rules.get_protein_sequences_and_structures.output.combined_sequences,
    output:
        "results/{pdb_id}/tblastn_results.txt",
    singularity:
        "docker://ncbi/blast"
    threads: config["blast"]["threads"]
    params:
        evalue=config["blast"]["e_value"],
    shell:
        """
        BLASTDB=$(pwd)/database/refseq_rna:$BLASTDB

        tblastn -query {input} -out {output} \
            -outfmt 6 -max_target_seqs 100 -evalue {params.evalue} \
            -num_threads {threads} -db refseq_rna
        """


rule download_nucleotide_sequences:
    input:
        "results/{pdb_id}/tblastn_results.txt",
    output:
        dir=directory("results/{pdb_id}/nucleotide_sequences/"),
        combined_sequences="results/{pdb_id}/nucleotide_sequences/combined.fasta",
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/download_nucleotide_sequences.py"


rule align_protein_structures:
    input:
        homologs=rules.find_structural_homologs_SCOPe.output,
        dir=rules.get_protein_sequences_and_structures.output.structures,
    output:
        "results/{pdb_id}/structural_alignment/alignment.log",
        "results/{pdb_id}/structural_alignment/.done",
        dir=directory("results/{pdb_id}/structural_alignment/"),
    singularity:
        "docker://f1lem0n/usalign:latest"
    params:
        split=config["usalign"]["split"],
        full=config["usalign"]["full"],
    shell:
        """
        # Run USalign
        USalign -dir {input.dir} {input.homologs} \
            -suffix .pdb -mm 4 -full {params.full} -o {output.dir}/sup \
            -split {params.split} > {output.dir}/alignment.log

        # Remove non-ATOM lines from superposed PDB files
        for s in $(find {output.dir} -name "sup*.pdb"); do
            awk '{{if($1=="ATOM") print $0}}' $s > $s.atoms
            rm $s
            mv $s.atoms $s
        done

        # Clean up and create .done file
        rm *.pml
        rm .pdb
        touch {output.dir}/.done
        """


rule align_nucleotide_sequences:
    input:
        rules.download_nucleotide_sequences.output.combined_sequences,
    output:
        "results/{pdb_id}/nucleotide_alignment/alignment.log",
        "results/{pdb_id}/nucleotide_alignment/alignment.txt",
        dir=directory("results/{pdb_id}/nucleotide_alignment/"),
    singularity:
        "docker://biocontainers/clustalw:v2.1lgpl-6-deb_cv1"
    shell:
        """
        clustalw -INFILE={input} -OUTFILE={output.dir}/alignment.txt \
            > {output.dir}/alignment.log
        """


rule downstream_analysis:
    input:
        "results/{pdb_id}/structural_homologs.txt",
        "results/{pdb_id}/protein_sequences/combined.fasta",
        "results/{pdb_id}/tblastn_results.txt",
        "results/{pdb_id}/structural_alignment/alignment.log",
    output:
        "results/{pdb_id}/downstream_analysis/.done",
    conda:
        "envs/dplyr.yaml"
    script:
        "scripts/downstream_analysis.R"
